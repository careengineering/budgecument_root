#####################################################

File Name: models.py
File Path: ../budgecument_root/budgecument/apps/bank_accounts/models.py

from django.core.exceptions import ValidationError
from django.db import models
from django.utils import timezone

from ..common.models import AccountHolder, Currency, BankName, OtherHolder

import datetime
import uuid






# - Bank Account
class BankAccount(models.Model):
    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    name = models.CharField(max_length=100)
    bank = models.ForeignKey(BankName, on_delete=models.CASCADE)
    account_holder = models.ForeignKey(AccountHolder, on_delete=models.CASCADE)
    currency = models.ForeignKey(Currency, on_delete=models.CASCADE)
    current_balance = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.bank} {self.name} - {self.currency.code} (Bakiye: {self.current_balance} {self.currency.symbol} )"

    def delete(self, *args, **kwargs):
        if self.current_balance != 0:
            raise ValidationError("Hesap silinemez. Mevcut bakiye sıfır değil.")
        super().delete(*args, **kwargs)

    class Meta:
        verbose_name = "Banka Hesabı"
        verbose_name_plural = "Banka Hesapları"

    @property
    def has_transactions(self):
        return Transaction.objects.filter(source_account=self).exists() or Transaction.objects.filter(destination_account=self).exists()


# - Transaction
class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('deposit', 'Gelen'),
        ('withdraw', 'Giden'),
        ('transfer', 'Transfer'),
    ]

    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    source_account = models.ForeignKey(BankAccount, related_name='transactions', on_delete=models.CASCADE)
    destination_account = models.ForeignKey(BankAccount, related_name='received_transactions', on_delete=models.CASCADE,
                                            null=True, blank=True)
    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)
    description = models.CharField(max_length=200)
    date = models.DateTimeField(default=timezone.now)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    amount_after_transaction = models.DecimalField(max_digits=10, decimal_places=2)

    def save(self, *args, **kwargs):
        if self.transaction_type == 'withdraw' and self.source_account.current_balance < self.amount:
            raise ValidationError("Yetersiz bakiye.")
        # Eğer işlem türü 'deposit' (gelen) ise, kaynak hesap bakiyesi artırılır
        if self.transaction_type == 'deposit':
            self.source_account.current_balance += self.amount
        # Eğer işlem türü 'withdraw' (giden) ise, kaynak hesap bakiyesi azaltılır
        elif self.transaction_type == 'withdraw':
            self.source_account.current_balance -= self.amount
        # Eğer işlem türü 'transfer' (transfer) ise, kaynak ve hedef hesap bakiyeleri güncellenir
        elif self.transaction_type == 'transfer':
            if self.destination_account:
                self.source_account.current_balance -= self.amount
                self.destination_account.current_balance += self.amount
                self.destination_account.save()
        
        self.amount_after_transaction = self.source_account.current_balance

        # Kaynak hesap bakiyesi güncellenir
        self.source_account.save()

        # Veritabanına kaydetme işlemi yapılır
        super(Transaction, self).save(*args, **kwargs)

    def __str__(self):
        return f"{self.transaction_type} - {self.amount} - {self.source_account.name}"

    class Meta:
        verbose_name = "İşlem"
        verbose_name_plural = "İşlemler"




#####################################################

File Name: forms.py
File Path: ../budgecument_root/budgecument/apps/bank_accounts/forms.py

from django import forms
from django.db.models import Q
from .models import BankAccount, Transaction

class BankAccountForm(forms.ModelForm):
    class Meta:
        model = BankAccount
        fields = ['name', 'bank', 'currency', 'current_balance', 'is_active']
        labels = {
            'name': 'Hesap Adı',
            'bank': 'Banka Adı',
            'currency': 'Para Birimi',
            'current_balance': 'Mevcut Bakiye',
            'is_active': 'Aktif',
        }

    def __init__(self, *args, **kwargs):
        super(BankAccountForm, self).__init__(*args, **kwargs)
        if self.instance and self.instance.pk:  # Check if instance has a primary key
            self.disable_fields_based_on_balance()

    def disable_fields_based_on_balance(self):
        if self.instance.current_balance != 0:
            self.fields['is_active'].disabled = True
        if self.instance.current_balance != 0 or self.instance.has_transactions:
            self.fields['bank'].disabled = True
            self.fields['currency'].disabled = True
            self.fields['current_balance'].disabled = True
        for field in self.fields:
            if field not in ['name', 'is_active']:
                self.fields[field].disabled = True


class TransactionForm(forms.ModelForm):
    class Meta:
        model = Transaction
        fields = ['transaction_type', 'source_account', 'destination_account', 'description', 'amount', 'date']
        labels = {
            'transaction_type': 'İşlem Türü',
            'source_account': 'Kaynak Hesap Adı',
            'destination_account': 'Hedef Hesap Adı',
            'description': 'Açıklama',
            'amount': 'Tutar',
            'date': 'Tarih',
        }

        widgets = {
            'transaction_type': forms.Select(attrs={'class': 'form-control', 'id': 'id_transaction_type'}),
            'source_account': forms.Select(attrs={'class': 'form-control', 'id': 'id_source_account'}),
            'destination_account': forms.Select(attrs={'class': 'form-control', 'id': 'id_destination_account'}),
            'description': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Açıklama girin'}),
            'amount': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Tutar girin'}),
            'date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': 'Tarih seçin'}),
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super(TransactionForm, self).__init__(*args, **kwargs)
        
        if user:
            # Sadece aktif olan ve kullanıcının bağlı olduğu hesapları listele
            self.fields['source_account'].queryset = BankAccount.objects.filter(
                account_holder=user.accountholder, is_active=True
            )
            self.fields['destination_account'].queryset = BankAccount.objects.none()  # Başlangıçta boş

    def clean_amount(self):
        amount = self.cleaned_data.get('amount')
        if amount <= 0:
            raise forms.ValidationError("Tutar pozitif bir değer olmalıdır.")
        return amount



#####################################################

File Name: views.py
File Path: ../budgecument_root/budgecument/apps/bank_accounts/views.py

from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import ValidationError
from django.http import HttpResponseRedirect
from django.http import JsonResponse
from django.shortcuts import get_object_or_404, render, redirect
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView

from .models import BankAccount, Transaction
from .forms import TransactionForm,BankAccountForm

from itertools import groupby
from operator import itemgetter



def get_destination_accounts(request, source_account_uid):
    # Kaynak hesabı uid'ye göre bul
    source_account = get_object_or_404(BankAccount, uid=source_account_uid)
    
    # Aynı para birimine sahip hesapları filtreleyin
    destination_accounts = BankAccount.objects.filter(
        account_holder=source_account.account_holder,
        currency=source_account.currency,
        is_active=True
    ).exclude(uid=source_account_uid).values('uid', 'name', 'currency__code')

    return JsonResponse(list(destination_accounts), safe=False)


####################################################################################
# - Bank Account
class BankAccountListView(LoginRequiredMixin, ListView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_list.html'

    def get_queryset(self):
        account_holder = self.request.user.accountholder
        return BankAccount.objects.filter(account_holder=account_holder).order_by('bank__name')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        bank_accounts = self.get_queryset()

        # Aktif ve pasif hesapları ayırıyoruz
        active_accounts = bank_accounts.filter(is_active=True)
        inactive_accounts = bank_accounts.filter(is_active=False)

        # Aktif hesapları banka adına göre grupluyoruz
        grouped_active_accounts = []
        for key, group in groupby(active_accounts, key=lambda x: x.bank):
            grouped_active_accounts.append((key, list(group)))

        # Pasif hesapları banka adına göre grupluyoruz
        grouped_inactive_accounts = []
        for key, group in groupby(inactive_accounts, key=lambda x: x.bank):
            grouped_inactive_accounts.append((key, list(group)))

        # Context'e ekliyoruz
        context['grouped_active_accounts'] = grouped_active_accounts
        context['grouped_inactive_accounts'] = grouped_inactive_accounts
        
        return context


class BankAccountDetailView(LoginRequiredMixin, DetailView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_detail.html'
    context_object_name = 'bank_account'
    pk_url_kwarg = 'uid'

    def get_object(self):
        uid = self.kwargs.get('uid')
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        bank_account = self.get_object()
        context['transactions'] = Transaction.objects.filter(
            source_account=bank_account
        ) | Transaction.objects.filter(
            destination_account=bank_account
        )
        return context


class BankAccountCreateView(LoginRequiredMixin, CreateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'bank_accounts/bank_account_form.html'
    success_url = reverse_lazy('bank_account_list')

    def form_valid(self, form):
        form.instance.account_holder = self.request.user.accountholder
        return super().form_valid(form)


class BankAccountUpdateView(LoginRequiredMixin, UpdateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'bank_accounts/bank_account_form.html'
    success_url = reverse_lazy('bank_account_list')

    def form_valid(self, form):
        form.instance.account_holder = self.request.user.accountholder
        return super().form_valid(form)

    def get_object(self):
        uid = self.kwargs.get('uid')
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)


class BankAccountDeleteView(LoginRequiredMixin, DeleteView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_confirm_delete.html'
    success_url = reverse_lazy('bank_account_list')
    pk_url_kwarg = 'uid'

    def form_valid(self, form):
        try:
            self.object.delete()
            messages.success(self.request, "Hesap başarıyla silindi.")
            return HttpResponseRedirect(self.success_url)
        except ValidationError as e:
            messages.error(self.request, e.message)
            return redirect(self.request.META.get('HTTP_REFERER'))

    def get_object(self, queryset=None):
        uid = self.kwargs.get(self.pk_url_kwarg)
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)






####################################################################################
# Transactions
class TransactionListView(LoginRequiredMixin, ListView):
    model = Transaction
    template_name = 'transactions/transaction_list.html'
    context_object_name = 'transactions'

    def get_queryset(self):
        # Source ve destination hesapların account_holder'ını kontrol et
        return Transaction.objects.filter(
            source_account__account_holder=self.request.user.accountholder
        ).union(
            Transaction.objects.filter(
                destination_account__account_holder=self.request.user.accountholder
            )
        )

class TransactionDetailView(LoginRequiredMixin, DetailView):
    model = Transaction
    template_name = 'transactions/transaction_detail.html'
    context_object_name = 'transaction'
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)


class TransactionCreateView(LoginRequiredMixin, CreateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'transactions/transaction_form.html'
    success_url = reverse_lazy('transaction_list')

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs

    def form_valid(self, form):
        source_account = form.cleaned_data['source_account']
        transaction_type = form.cleaned_data['transaction_type']
        destination_account = form.cleaned_data.get('destination_account')

        if transaction_type == 'transfer' and not destination_account:
            form.add_error('destination_account', 'Transfer işlemi için hedef hesap seçmelisiniz.')
            return self.form_invalid(form)

        if transaction_type == 'transfer' and destination_account.currency != source_account.currency:
            form.add_error('destination_account', 'Kaynak ve hedef hesapların para birimleri aynı olmalıdır.')
            return self.form_invalid(form)

        form.instance.source_account = source_account
        form.instance.destination_account = destination_account if transaction_type == 'transfer' else None

        return super().form_valid(form)


class TransactionUpdateView(LoginRequiredMixin, UpdateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'transactions/transaction_form.html'
    success_url = reverse_lazy('transaction_list')
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)

    def form_valid(self, form):
        # Eski işlem bilgilerini al
        transaction = form.save(commit=False)

        # İşlem türüne göre bakiyeleri geri al
        if transaction.transaction_type == 'deposit':
            transaction.source_account.current_balance -= transaction.amount
        elif transaction.transaction_type == 'withdraw':
            transaction.source_account.current_balance += transaction.amount
        elif transaction.transaction_type == 'transfer':
            transaction.source_account.current_balance += transaction.amount
            if transaction.destination_account:
                transaction.destination_account.current_balance -= transaction.amount

        # Yeni işlem bilgileriyle güncelle
        transaction.source_account = form.cleaned_data['source_account']
        transaction.transaction_type = form.cleaned_data['transaction_type']
        transaction.description = form.cleaned_data['description']
        transaction.amount = form.cleaned_data['amount']
        transaction.date = form.cleaned_data['date']

        # Eğer transferse, destination_account'u da güncelle
        if transaction.transaction_type == 'transfer':
            transaction.destination_account = form.cleaned_data['destination_account']

        # Yeni bakiyeleri hesapla
        if transaction.transaction_type == 'deposit':
            transaction.source_account.current_balance += transaction.amount
        elif transaction.transaction_type == 'withdraw':
            transaction.source_account.current_balance -= transaction.amount
        elif transaction.transaction_type == 'transfer':
            if transaction.destination_account:
                transaction.destination_account.current_balance += transaction.amount

        # Hesap bakiyelerini kaydet
        transaction.source_account.save()
        if transaction.transaction_type == 'transfer' and transaction.destination_account:
            transaction.destination_account.save()

        # İşlemi kaydet
        transaction.save()

        return super().form_valid(form)



class TransactionDeleteView(LoginRequiredMixin, DeleteView):
    model = Transaction
    template_name = 'transactions/transaction_confirm_delete.html'
    success_url = reverse_lazy('transaction_list')
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()

        # Get the source account of the transaction
        source_account = self.object.source_account

        # Update current_balance of the source account
        if self.object.transaction_type == 'deposit':
            source_account.current_balance -= self.object.amount
        elif self.object.transaction_type == 'withdraw':
            source_account.current_balance += self.object.amount
        elif self.object.transaction_type == 'transfer':
            source_account.current_balance += self.object.amount

            # If it's a transfer, also update the destination account's balance
            if self.object.destination_account:
                destination_account = self.object.destination_account
                destination_account.current_balance -= self.object.amount
                destination_account.save()

        source_account.save()

        # Delete the transaction object
        self.object.delete()

        return HttpResponseRedirect(self.get_success_url())





#####################################################

File Name: urls.py
File Path: ../budgecument_root/budgecument/apps/bank_accounts/urls.py

from django.urls import path
from . import views
from .views import get_destination_accounts

urlpatterns = [
    # Bank Account URL
    path('', views.BankAccountListView.as_view(), name='bank_account_list'),
    path('detail/<uuid:uid>/', views.BankAccountDetailView.as_view(), name='bank_account_detail'),
    path('new/', views.BankAccountCreateView.as_view(), name='bank_account_create'),
    path('edit/<uuid:uid>/', views.BankAccountUpdateView.as_view(), name='bank_account_edit'),
    path('delete/<uuid:uid>/', views.BankAccountDeleteView.as_view(), name='bank_account_delete'),

    # Transaction URL
    path('transactions/', views.TransactionListView.as_view(), name='transaction_list'),
    path('transactions/new/', views.TransactionCreateView.as_view(), name='transaction_create'),
    path('transactions/<uuid:transaction_uid>/', views.TransactionDetailView.as_view(), name='transaction_detail'),
    path('transactions/update/<uuid:transaction_uid>/', views.TransactionUpdateView.as_view(), name='transaction_update'),
    path('transactions/delete/<uuid:transaction_uid>/', views.TransactionDeleteView.as_view(), name='transaction_delete'),
    path('get_destination_accounts/<uuid:source_account_uid>/', get_destination_accounts, name='get_destination_accounts'),
]



#####################################################

File Name: bank_account_confirm_delete.html
File Path: ../budgecument_root/budgecument/templates/bank_accounts/bank_account_confirm_delete.html

{% extends "base.html" %}

{% block content %}
  <h1>{{ object.name }} Hesabını Sil</h1>
  <p>Bu işlemi geri alamazsınız.</p>

  <form method="post">
    {% csrf_token %}
    {% if object.current_balance == 0 %}
      <input type="submit" value="Sil" class="btn btn-danger">
    {% else %}
      <button type="button" class="btn btn-danger" disabled>Sil</button>
      <p class="text-danger">Hesap silinemez. Mevcut bakiye sıfır değil.</p>
    {% endif %}
  </form>

  <a href="{% url 'bank_account_list' %}" class="btn btn-secondary">Geri Dön</a>
{% endblock %}




#####################################################

File Name: bank_account_form.html
File Path: ../budgecument_root/budgecument/templates/bank_accounts/bank_account_form.html

{% extends "base.html" %}
{% block title %}Budgecument - Banka Hesapları {% endblock %}
{% load crispy_forms_tags %}

{% block content %}

<div class="container col-md-6 bg-light shadow-md p-3 form-layout">
  <h3>{% if object %}Hesabı Düzenle{% else %}Yeni Hesap{% endif %}</h3>
  <form method="post" autocomplete="off">
    {% csrf_token %}
    {{form.is_active|as_crispy_field}}
    <br>
    {{form.name|as_crispy_field}}
    <br>
    {{form.bank|as_crispy_field}}
    <br>
    {{form.currency|as_crispy_field}}
    <br>
    {{form.current_balance|as_crispy_field}}
    <br>
    <button type="submit" class="btn btn-success w-40 btn-block p-2">Kaydet &nbsp;
      <i class="fa fa-floppy-o" aria-hidden="true"></i></button>
    <a href="{% url 'bank_account_list' %}" class="btn btn-secondary w-40 btn-block p-2">Geri Dön &nbsp;
      <i class="fa fa-arrow-circle-left" aria-hidden="true"></i></a>
  </form>


</div>
{% endblock %}




#####################################################

File Name: bank_account_detail.html
File Path: ../budgecument_root/budgecument/templates/bank_accounts/bank_account_detail.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Hesap Detayı{% endblock %}

{% block content %}
<div class="container">
    <h4 class="p-2 text-center">{{ bank_account.bank.name }} {{ bank_account.name }} Hesabı ({{ bank_account.currency.code }}) - Detaylar</h4>
        <div class="d-inline"><strong>Mevcut Bakiye:</strong></div>
        <div class="d-inline {% if object.current_balance < 0 %}text-danger{% endif %}"> {{ object.current_balance }} {{ object.currency.symbol }}</div>
    <br>
    <br>

  <div class="d-flex justify-content-between align-items-center">
    <h4 class="p-2">İşlemler</h4>
    <a href="{% url 'transaction_create' %}" class="btn btn-outline-success btn-sm">Ekle &nbsp;
    <i class="fa fa-plus-circle" aria-hidden="true"></i></a>
  </div>
    <hr>

  <table class="table table-hover table-bordered">
      <thead class="table-light text-center">
          <tr>
              <th scope="col" class="col-sm-1" >#</th>
              <th scope="col" class="col-sm-1">Tarih</th>
              <th scope="col" class="col-sm-1" >İşlem Türü</th>
              <th scope="col">Kaynak Hesap</th>
              <th scope="col">Hedef Hesap</th>
              <th scope="col">Açıklama</th>
              <th scope="col">Tutar</th>
              <th scope="col" class="col-sm-2">Detaylar</th>
          </tr>
      </thead>
      <tbody>
      {% if transactions %}
          {% for transaction in transactions %}
          <tr class="text-center">
              <td>{{ forloop.counter }}</td>
              <td>{{ transaction.date |date:"d/m/Y" }}</td>
              <td>{{ transaction.get_transaction_type_display }}</td>
              <td>{{ transaction.source_account }}</td>
              <td>{{ transaction.destination_account|default:"-" }}</td>
              <td>{{ transaction.description }}</td>
              <td class="{% if transaction.get_transaction_type_display == 'Giden' %}text-danger{% endif %}">{% if transaction.get_transaction_type_display == "Giden" %}-{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% else %}{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% endif %}</td>
              <td>
                  <a class="btn btn-primary btn-sm" href="{% url 'transaction_detail' transaction_uid=transaction.uid %}">
                      <i class="fa fa-eye" aria-hidden="true"></i></a>
                  <a class="btn btn-success btn-sm" href="{% url 'transaction_update' transaction_uid=transaction.uid %}">
                      <i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>
                  <a class="btn btn-danger btn-sm" href="{% url 'transaction_delete' transaction_uid=transaction.uid %}">
                      <i class="fa fa-trash" aria-hidden="true"></i></a>
              </td>
          </tr>
          {% endfor %}
      {% else %}
            <tr>
                <td colspan="8">İşlem bulunamadı.</td>
            </tr>
        {% endif %}
      </tbody>
  </table>

  <a href="{% url 'bank_account_list' %}" class="btn btn-secondary w-40 btn-block p-2">Geri Dön &nbsp;
    <i class="fa fa-arrow-circle-left" aria-hidden="true"></i></a>
</div>
{% endblock %}




#####################################################

File Name: bank_account_list.html
File Path: ../budgecument_root/budgecument/templates/bank_accounts/bank_account_list.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Banka Hesapları{% endblock %}

{% block content %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class="p-2">Banka Hesapları</h4>
        <a href="{% url 'bank_account_create' %}" class="btn btn-outline-success btn-sm">Ekle &nbsp;
        <i class="fa fa-plus-circle" aria-hidden="true"></i></a>
    </div>
    <br>

    <h5 class="p-2">Aktif Banka Hesapları</h5>
    {% if grouped_active_accounts %}
        {% for bank, accounts in grouped_active_accounts %}
            <div class="card mb-3" style="background-color: {{ bank.color }}">
                <div class="card-header">
                    {{ bank.name }}
                </div>
                <ul class="list-group list-group-flush">
                    {% for account in accounts %}
                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-sm-1 text-center">{{ forloop.counter }}</div>
                                    <div class="col-sm-5">{{ account.name }} ({{ account.currency.code }})</div>
                                    <div class="col-sm-3 text-center {% if account.current_balance < 0 %}text-danger{% endif %}">
                                        {{ account.current_balance }} {{ account.currency.symbol }}
                                    </div>
                                    <div class="col-sm-3 text-center">

                                        <a class="btn btn-primary btn-sm" href="{% url 'bank_account_detail' uid=account.uid %}">
                                            <i class="fa fa-eye" aria-hidden="true"></i>
                                        </a>

                                        <a class="btn btn-success btn-sm" href="{% url 'bank_account_edit' uid=account.uid %}">
                                            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                        </a>

                                        <a href="#"
                                           class="btn btn-danger btn-sm {% if account.current_balance != 0 or account.has_transactions %}disabled{% endif %}"
                                           tabindex="-1"
                                           onclick="showModal('{{ account.uid }}',
                                                              'Bu banka hesabını silmek istediğinize emin misiniz?',
                                                              '{% url 'bank_account_delete' uid=account.uid %}')">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                        </a>

                                    </div>
                                </div>
                            </li>

                    {% endfor %}
                </ul>
            </div>
        {% endfor %}
    {% else %}
        <p>Aktif banka hesabı bulunamadı.</p>
    {% endif %}

<br>
<hr> <!-- Çizgi -->
<br>
    <h5 class="p-2">Pasif Banka Hesapları</h5>     
    {% if grouped_inactive_accounts %}
        {% for bank, accounts in grouped_inactive_accounts %}
            <div class="card mb-3">
                <div class="card-header">
                    {{ bank.name }}
                </div>
                <ul class="list-group list-group-flush">
                    {% for account in accounts %}
                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-sm-1 text-center">{{ forloop.counter }}</div>
                                    <div class="col-sm-5">{{ account.name }} ({{ account.currency.code }})</div>
                                    <div class="col-sm-3 text-center {% if account.current_balance < 0 %}text-danger{% endif %}">
                                        {{ account.current_balance }} {{ account.currency.symbol }}
                                    </div>
                                    <div class="col-sm-3 text-center">

                                        <a class="btn btn-primary btn-sm" href="{% url 'bank_account_detail' uid=account.uid %}">
                                            <i class="fa fa-eye" aria-hidden="true"></i>
                                        </a>

                                        <a class="btn btn-success btn-sm" href="{% url 'bank_account_edit' uid=account.uid %}">
                                            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                        </a>

                                        <a href="#"
                                           class="btn btn-danger btn-sm {% if account.current_balance != 0 or account.has_transactions %}disabled{% endif %}"
                                           tabindex="-1"
                                           onclick="showModal('{{ account.uid }}',
                                                              'Bu banka hesabını silmek istediğinize emin misiniz?',
                                                              '{% url 'bank_account_delete' uid=account.uid %}')">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                        </a>

                                    </div>
                                </div>
                            </li>

                    {% endfor %}
                </ul>
            </div>
        {% endfor %}
    {% else %}
        <p>Pasif banka hesabı bulunamadı.</p>
    {% endif %}

</div>
{% endblock %}




#####################################################

File Name: css/styles.css
File Path: ../budgecument_root/budgecument/static/css/styles.css

.message.error {
    color : red;
}

.message.success {
    color: green;
}





.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}






#####################################################

File Name: js/app.js
File Path: ../budgecument_root/budgecument/static/js/app.js

// Modal
function showModal(uid, modalTextContent, deleteUrl) {
    var modal = document.getElementById('deleteModal');
    var modalText = document.getElementById('modalText');
    var deleteForm = document.getElementById('deleteForm');
    var deleteUid = document.getElementById('deleteUid');

    modal.style.display = "block";
    modalText.textContent = modalTextContent;
    deleteForm.action = deleteUrl;  // Set the form action URL
    deleteUid.value = uid;  // Set the value of hidden input to the bank account uid
}

function closeModal() {
    var modal = document.getElementById('deleteModal');
    modal.style.display = "none";
}

window.onclick = function(event) {
    var modal = document.getElementById('deleteModal');
    if (event.target == modal) {
        modal.style.display = "none";
    }
};



// For transfer
$(document).ready(function() {
    // Source account seçildiğinde tetiklenecek fonksiyon
    $('#id_source_account').change(function() {
        var sourceAccountUid = $(this).val(); // Seçilen source_account'un UUID'sini al
        if (sourceAccountUid) {
            // AJAX isteği için URL'yi oluştur
            var url = "/bank_accounts/get_destination_accounts/" + sourceAccountUid + "/";
            
            // AJAX isteği ile destination_account seçeneklerini güncelle
            $.ajax({
                url: url,
                type: 'GET',
                success: function(data) {
                    // Destination account seçeneklerini temizle
                    $('#id_destination_account').empty();
                    // Yeni seçenekleri ekle
                    $.each(data, function(index, account) {
                        $('#id_destination_account').append(
                            $('<option></option>').attr('value', account.uid).text(account.name + ' (' + account.currency__code + ')')
                        );
                    });
                },
                error: function(xhr, status, error) {
                    console.error("AJAX hatası:", error);
                }
            });
        } else {
            // Source account seçilmezse destination_account'u temizle
            $('#id_destination_account').empty();
            $('#id_destination_account').append('<option value="">Hedef hesap seçin</option>'); // Varsayılan bir seçenek ekleyin
        }
    });
});

