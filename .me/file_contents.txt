transaction_list.html sayfasında yeni işlem eklenirken;
- source_account veya destination_account is_active=false ise gösterilmesin
- source_account veya source_account listelerinde sadece hesap sahibine ait hesaplar görünsün
- transaction_type giden seçildi ve source_account sıfır veya sıfırdan küçükse giden listenin altında bu bilgi uyarı
olarak görünsün ama işleme izin versin
- source_account ve destination_account listelerinde current_balance tutarıda görünsün
- transaction_type transfer seçildi ise source_account currency_code ile aynı para birimine sahip destination_account
listesi görünsün.






#####################################################

File Name: models.py
File Path: ../budgecument/apps/bank_accounts/models.py

from django.core.exceptions import ValidationError
from django.db import models

from ..common.models import AccountHolder, Currency, BankName, OtherHolder

import datetime
import uuid


# - Bank Account
class BankAccount(models.Model):
    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    name = models.CharField(max_length=200)
    bank = models.ForeignKey(BankName, on_delete=models.CASCADE)
    account_holder = models.ForeignKey(AccountHolder, on_delete=models.CASCADE)
    currency = models.ForeignKey(Currency, on_delete=models.CASCADE)
    current_balance = models.DecimalField(max_digits=100, decimal_places=2, default=0.00)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.bank} {self.name} - {self.currency.code}"

    def delete(self, *args, **kwargs):
        if self.current_balance != 0:
            raise ValidationError("Hesap silinemez. Mevcut bakiye sıfır değil.")
        super().delete(*args, **kwargs)

    class Meta:
        verbose_name = "Banka Hesabı"
        verbose_name_plural = "Banka Hesapları"

    @property
    def has_transactions(self):
        return Transaction.objects.filter(source_account=self).exists() or Transaction.objects.filter(destination_account=self).exists()










# - Transaction
class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('deposit', 'Gelen'),
        ('withdraw', 'Giden'),
        ('transfer', 'Transfer'),
    ]

    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    source_account = models.ForeignKey(BankAccount, related_name='transactions', on_delete=models.CASCADE)
    destination_account = models.ForeignKey(BankAccount, related_name='received_transactions', on_delete=models.CASCADE,
                                            null=True, blank=True)
    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)
    description = models.CharField(max_length=255)
    date = models.DateTimeField(default=datetime.datetime.now)
    amount = models.DecimalField(max_digits=100, decimal_places=2)
    amount_after_transaction = models.DecimalField(max_digits=100, decimal_places=2)

    def save(self, *args, **kwargs):
        if self.transaction_type == 'deposit':
            self.source_account.current_balance += self.amount
        elif self.transaction_type == 'withdraw':
            self.source_account.current_balance -= self.amount
        elif self.transaction_type == 'transfer':
            if self.destination_account:
                self.source_account.current_balance -= self.amount
                self.destination_account.current_balance += self.amount
                self.destination_account.save()
        self.amount_after_transaction = self.source_account.current_balance
        self.source_account.save()
        super(Transaction, self).save(*args, **kwargs)

    def __str__(self):
        return f"{self.transaction_type} - {self.amount} - {self.source_account.name}"

    class Meta:
        verbose_name = "İşlem"
        verbose_name_plural = "İşlemler"




#####################################################

File Name: forms.py
File Path: ../budgecument/apps/bank_accounts/forms.py

from django import forms
from django.db.models import Q

from .models import BankAccount, Transaction

class BankAccountForm(forms.ModelForm):
    class Meta:
        model = BankAccount
        fields = ['name', 'bank', 'currency', 'current_balance', 'is_active']
        labels = {
            'name': 'Hesap Adı',
            'bank': 'Banka Adı',
            'currency': 'Para Birimi',
            'current_balance': 'Mevcut Bakiye',
            'is_active': 'Aktif',
        }

    def __init__(self, *args, **kwargs):
        super(BankAccountForm, self).__init__(*args, **kwargs)
        if self.instance and self.instance.pk:  # Check if instance has a primary key
            if self.instance.current_balance != 0:
                self.fields['is_active'].disabled = True
            if self.instance.current_balance != 0 or self.instance.has_transactions:
                self.fields['bank'].disabled = True
                self.fields['currency'].disabled = True
                self.fields['current_balance'].disabled = True
            for field in self.fields:
                if field not in ['name', 'is_active']:
                    self.fields[field].disabled = True





class TransactionForm(forms.ModelForm):
    class Meta:
        model = Transaction
        fields = ['transaction_type', 'source_account', 'destination_account', 'description', 'amount','date']

        widgets = {
            'transaction_type': forms.Select(attrs={'class': 'form-control', 'id': 'id_transaction_type'}),
            'source_account': forms.Select(attrs={'class': 'form-control', 'id': 'id_source_account'}),
            'destination_account': forms.Select(attrs={'class': 'form-control', 'id': 'id_destination_account'}),
            'description': forms.TextInput(attrs={'class': 'form-control'}),
            'amount': forms.NumberInput(attrs={'class': 'form-control'}),
            'date': forms.DateInput(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super(TransactionForm, self).__init__(*args, **kwargs)
        self.fields['destination_account'].queryset = BankAccount.objects.none()  # Initially empty queryset








#####################################################

File Name: views.py
File Path: ../budgecument/apps/bank_accounts/views.py

from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import ValidationError
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render, redirect
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView

from .models import BankAccount, Transaction
from .forms import TransactionForm,BankAccountForm

from itertools import groupby
from operator import itemgetter


####################################################################################
# - Bank Account
class BankAccountListView(LoginRequiredMixin, ListView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_list.html'

    def get_queryset(self):
        account_holder = self.request.user.accountholder
        return BankAccount.objects.filter(account_holder=account_holder, is_active=True).order_by('bank__name')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        bank_accounts = self.get_queryset()
        grouped_accounts = []
        for key, group in groupby(bank_accounts, key=lambda x: x.bank):
            grouped_accounts.append((key, list(group)))
        context['grouped_accounts'] = grouped_accounts
        return context


class BankAccountDetailView(LoginRequiredMixin, DetailView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_detail.html'
    context_object_name = 'bank_account'
    pk_url_kwarg = 'uid'

    def get_object(self):
        uid = self.kwargs.get('uid')
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        bank_account = self.get_object()
        context['transactions'] = Transaction.objects.filter(
            source_account=bank_account
        ) | Transaction.objects.filter(
            destination_account=bank_account
        )
        return context


class BankAccountCreateView(LoginRequiredMixin, CreateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'bank_accounts/bank_account_form.html'
    success_url = reverse_lazy('bank_account_list')

    def form_valid(self, form):
        form.instance.account_holder = self.request.user.accountholder
        return super().form_valid(form)


class BankAccountUpdateView(LoginRequiredMixin, UpdateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'bank_accounts/bank_account_form.html'
    success_url = reverse_lazy('bank_account_list')

    def form_valid(self, form):
        form.instance.account_holder = self.request.user.accountholder
        return super().form_valid(form)

    def get_object(self):
        uid = self.kwargs.get('uid')
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)


class BankAccountDeleteView(LoginRequiredMixin, DeleteView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_confirm_delete.html'
    success_url = reverse_lazy('bank_account_list')
    pk_url_kwarg = 'uid'

    def form_valid(self, form):
        try:
            self.object.delete()
            messages.success(self.request, "Hesap başarıyla silindi.")
            return HttpResponseRedirect(self.success_url)
        except ValidationError as e:
            messages.error(self.request, e.message)
            return redirect(self.request.META.get('HTTP_REFERER'))

    def get_object(self, queryset=None):
        uid = self.kwargs.get(self.pk_url_kwarg)
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)


class InactiveBankAccountListView(LoginRequiredMixin, ListView):
    model = BankAccount
    template_name = 'bank_accounts/inactive_bank_account_list.html'
    context_object_name = 'inactive_bank_accounts'

    def get_queryset(self):
        account_holder = self.request.user.accountholder
        queryset = BankAccount.objects.filter(account_holder=account_holder, is_active=False).order_by('bank__name')
        return queryset





####################################################################################
# Transactions
class TransactionListView(LoginRequiredMixin, ListView):
    model = Transaction
    template_name = 'transactions/transaction_list.html'
    context_object_name = 'transactions'

    def get_queryset(self):
        return Transaction.objects.filter(source_account__account_holder=self.request.user.accountholder)


class TransactionDetailView(LoginRequiredMixin, DetailView):
    model = Transaction
    template_name = 'transactions/transaction_detail.html'
    context_object_name = 'transaction'
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)


class TransactionCreateView(LoginRequiredMixin, CreateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'transactions/transaction_form.html'
    success_url = reverse_lazy('transaction_list')

    def get_form(self, form_class=None):
        form = super(TransactionCreateView, self).get_form(form_class)
        form.fields['source_account'].queryset = BankAccount.objects.filter(
            account_holder=self.request.user.accountholder)
        form.fields['destination_account'].queryset = BankAccount.objects.filter(
            account_holder=self.request.user.accountholder)
        return form

    def form_valid(self, form):
        form.instance.source_account = form.cleaned_data['source_account']
        form.instance.transaction_type = form.cleaned_data['transaction_type']
        form.instance.description = form.cleaned_data['description']
        form.instance.amount = form.cleaned_data['amount']
        form.instance.date = form.cleaned_data['date']

        if form.cleaned_data['transaction_type'] == 'transfer':
            form.instance.destination_account = form.cleaned_data['destination_account']

        return super().form_valid(form)


class TransactionUpdateView(LoginRequiredMixin, UpdateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'transactions/transaction_form.html'
    success_url = reverse_lazy('transaction_list')
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)


class TransactionDeleteView(LoginRequiredMixin, DeleteView):
    model = Transaction
    template_name = 'transactions/transaction_confirm_delete.html'
    success_url = reverse_lazy('transaction_list')
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()

        # Get the source account of the transaction
        source_account = self.object.source_account

        # Update current_balance of the source account
        if self.object.transaction_type == 'deposit':
            source_account.current_balance -= self.object.amount
        elif self.object.transaction_type == 'withdraw':
            source_account.current_balance += self.object.amount
        elif self.object.transaction_type == 'transfer':
            source_account.current_balance += self.object.amount

            # If it's a transfer, also update the destination account's balance
            destination_account = self.object.destination_account
            destination_account.current_balance -= self.object.amount
            destination_account.save()

        source_account.save()

        # Delete the transaction object
        self.object.delete()

        return HttpResponseRedirect(self.get_success_url())




#####################################################

File Name: urls.py
File Path: ../budgecument/apps/bank_accounts/urls.py

from django.urls import path
from . import views

urlpatterns = [
    # Bank Account URL
    path('', views.BankAccountListView.as_view(), name='bank_account_list'),
    path('detail/<uuid:uid>/', views.BankAccountDetailView.as_view(), name='bank_account_detail'),
    path('new/', views.BankAccountCreateView.as_view(), name='bank_account_create'),
    path('edit/<uuid:uid>/', views.BankAccountUpdateView.as_view(), name='bank_account_edit'),
    path('delete/<uuid:uid>/', views.BankAccountDeleteView.as_view(), name='bank_account_delete'),

    # Inactive Bank Account URL
    path('inactive/', views.InactiveBankAccountListView.as_view(), name='inactive_bank_account_list'),

    # Transaction URL
    path('transactions/', views.TransactionListView.as_view(), name='transaction_list'),
    path('transactions/new/', views.TransactionCreateView.as_view(), name='transaction_create'),
    path('transactions/<uuid:transaction_uid>/', views.TransactionDetailView.as_view(), name='transaction_detail'),
    path('transactions/update/<uuid:transaction_uid>/', views.TransactionUpdateView.as_view(), name='transaction_update'),
    path('transactions/delete/<uuid:transaction_uid>/', views.TransactionDeleteView.as_view(), name='transaction_delete'),
]




#####################################################

File Name: transaction_confirm_delete.html
File Path: ../budgecument/templates/transactions/transaction_confirm_delete.html

{% extends "base.html" %}
{% block title %}İşlem Sil{% endblock %}

{% block content %}
<div class="container">
    <h3>İşlemi Sil</h3>
    <p>Bu işlemi silmek istediğinizden emin misiniz?</p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Sil</button>
        <a href="{% url 'transaction_list' %}" class="btn btn-secondary">Vazgeç</a>
    </form>
</div>
{% endblock %}




#####################################################

File Name: transaction_list.html
File Path: ../budgecument/templates/transactions/transaction_list.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Hesap İşlemleri {% endblock %}

{% block content %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center">
    <h4 class="p-2">Hesap İşlemleri</h4>
    <a href="{% url 'transaction_create' %}" class="btn btn-outline-success btn-sm">Ekle &nbsp;
    <i class="fa fa-plus-circle" aria-hidden="true"></i></a>
  </div>
    <br>
  <table class="table table-hover table-bordered">
      <thead class="table-light text-center">
          <tr>
              <th scope="col" class="col-sm-1" >#</th>
              <th scope="col" class="col-sm-1">Tarih</th>
              <th scope="col" class="col-sm-1" >İşlem Türü</th>
              <th scope="col">Kaynak Hesap</th>
              <th scope="col">Hedef Hesap</th>
              <th scope="col">Açıklama</th>
              <th scope="col">Tutar</th>
              <th scope="col" class="col-sm-1">Detaylar</th>
          </tr>
      </thead>
      <tbody>
      {% if transactions %}
          {% for transaction in transactions %}
          <tr class="text-center">
              <td>{{ forloop.counter }}</td>
              <td>{{ transaction.date |date:"d/m/Y" }}</td>
              <td>{{ transaction.get_transaction_type_display }}</td>
              <td>{{ transaction.source_account }}</td>
              <td>{{ transaction.destination_account|default:"-" }}</td>
              <td>{{ transaction.description }}</td>
              <td class="{% if transaction.get_transaction_type_display == 'Giden' %}text-danger{% endif %}">{% if transaction.get_transaction_type_display == "Giden" %}-{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% else %}{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% endif %}</td>
              <td>
<!--                  gerekli değil şimdilik dursun-->
<!--                  <a class="btn btn-primary btn-sm" href="{% url 'transaction_detail' transaction_uid=transaction.uid %}">-->
<!--                      <i class="fa fa-eye" aria-hidden="true"></i></a>-->
                  <a class="btn btn-success btn-sm" href="{% url 'transaction_update' transaction_uid=transaction.uid %}">
                      <i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>

                  
                  <a href="#" class="btn btn-danger btn-sm" onclick="showModal('{{ transaction.uid }}',
                                                                        'Bu işlemi silmek istediğinize emin misiniz?',
                                                                         '{% url 'transaction_delete' transaction_uid=transaction.uid %}')">
                        <i class="fa fa-trash" aria-hidden="true"></i>
                    </a>

              </td>
          </tr>
          {% endfor %}
      {% else %}
            <tr>
                <td colspan="8">İşlem bulunamadı.</td>
            </tr>
        {% endif %}
      </tbody>
  </table>
</div>

{% endblock %}



#####################################################

File Name: transaction_detail.html
File Path: ../budgecument/templates/transactions/transaction_detail.html

<!--gerekli değil şimdilik dursun-->

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - İşlem Detayı{% endblock %}

{% block content %}
<div class="container">
    <h3>İşlem Detayı</h3>
    <ul>
        <li><strong>Tarih:</strong> {{ transaction.date }}</li>
        <li><strong>İşlem Türü:</strong> {{ transaction.get_transaction_type_display }}</li>
        <li><strong>Kaynak Hesap:</strong> {{ transaction.source_account }}</li>
        <li><strong>Hedef Hesap:</strong> {{ transaction.destination_account|default:"-" }}</li>
        <li><strong>Açıklama:</strong> {{ transaction.description }}</li>
        <li><strong>Tutar:</strong> {{ transaction.amount }}</li>
    </ul>
    <a href="{% url 'transaction_list' %}" class="btn btn-secondary">Geri Dön</a>
</div>
{% endblock %}




#####################################################

File Name: transaction_form.html
File Path: ../budgecument/templates/transactions/transaction_form.html

{% extends "base.html" %}
{% block title %}Budgecument - Yeni Hesap İşlemi {% endblock %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container col-md-6 bg-light shadow-md p-3 form-layout">
  <h3>{% if object %}İşlemi Düzenle{% else %}Yeni İşlem{% endif %}</h3>
  <form method="post" autocomplete="off">
    {% csrf_token %}

    {{ form.date.label_tag }}
    {{ form.date }}
    <br>

    {{ form.transaction_type.label_tag }}
    {{ form.transaction_type }}
    <br>
    {{ form.source_account.label_tag }}
    {{ form.source_account }}
    <br>

    <div id="destination_account_field" style="display: none;">
      {{ form.destination_account.label_tag }}
      {{ form.destination_account }}
    </div>
    <br>

    {{ form.description.label_tag }}
    {{ form.description }}
    <br>
    {{ form.amount.label_tag }}
    {{ form.amount }}
    <br>

    <button type="submit" class="btn btn-success w-40 btn-block p-2">Kaydet &nbsp;
      <i class="fa fa-floppy-o" aria-hidden="true"></i></button>
    <a href="{% url 'transaction_list' %}" class="btn btn-secondary w-40 btn-block p-2">Geri Dön &nbsp;
      <i class="fa fa-arrow-circle-left" aria-hidden="true"></i></a>
  </form>
</div>
{% endblock %}



#####################################################

File Name: css/styles.css
File Path: ../budgecument/static/css/styles.css

.message.error {
    color : red;
}

.message.success {
    color: green;
}





.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}






#####################################################

File Name: js/app.js
File Path: ../budgecument/static/js/app.js

// Modal
function showModal(uid, modalTextContent, deleteUrl) {
    var modal = document.getElementById('deleteModal');
    var modalText = document.getElementById('modalText');
    var deleteForm = document.getElementById('deleteForm');
    var deleteUid = document.getElementById('deleteUid');

    modal.style.display = "block";
    modalText.textContent = modalTextContent;
    deleteForm.action = deleteUrl;  // Set the form action URL
    deleteUid.value = uid;  // Set the value of hidden input to the bank account uid
}

function closeModal() {
    var modal = document.getElementById('deleteModal');
    modal.style.display = "none";
}

window.onclick = function(event) {
    var modal = document.getElementById('deleteModal');
    if (event.target == modal) {
        modal.style.display = "none";
    }
};



#####################################################

File Name: base.html
File Path: ../budgecument/templates/base.html

{% load static %}
<!doctype html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{% block title %}{% endblock %}</title>
    <!-- Favicon -->
    <link rel="shortcut icon" href="{% static 'favicon.ico' %}" type="image/x-icon">
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Select2 CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <!-- Font -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" type="text/css" href="{% static 'css/styles.css' %}">


</head>
<body>
        <!-- NavBar -->
        {% include 'navbar.html' %}
        <br>

        <!-- Messages -->
        {% for message in messages %}
            <div class="message {{message.tags}} text-center">
                {{message}}
            </div>
        {% endfor %}

        <!-- Content -->
        {% block content %}
        <!-- Default content -->
        {% endblock %}

        <!-- Footer -->
        {% include 'footer.html' %}

        <!-- Modal -->
        <div id="deleteModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <p id="modalText"></p>
                <form id="deleteForm" method="post">
                    {% csrf_token %}
                    <input type="hidden" name="uid" id="deleteUid">
                    <button type="submit" class="btn btn-danger">Evet</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Hayır</button>
                </form>
            </div>
        </div>

        <!-- Bootstrap -->
        <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
        <!-- jQuery -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <!-- Select2 JS -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
        <!-- Custom JS -->
        <script src="{% static 'js/app.js' %}"></script>

</body>
</html>

