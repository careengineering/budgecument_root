#####################################################

File Name: models.py
File Path: ../budgecument/apps/user_accounts/models.py

from django.db import models

# Create your models here.




#####################################################

File Name: forms.py
File Path: ../budgecument/apps/user_accounts/forms.py

from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django import forms
from django.forms.widgets import PasswordInput, TextInput


class RegistrationForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ["username", "email", "password1", "password2"]

    def clean_email(self):
        email = self.cleaned_data.get("email")
        if User.objects.filter(email=email).exists():
            raise ValidationError("An account with this email address already exists!")
        return email


class LoginForm(AuthenticationForm):
    username = forms.CharField(widget=TextInput())
    password = forms.CharField(widget=PasswordInput())




#####################################################

File Name: views.py
File Path: ../budgecument/apps/user_accounts/views.py

from django.template.loader import render_to_string
from django.core.mail import EmailMessage
from django.shortcuts import render, redirect
from django.urls import reverse
from django.utils.encoding import force_bytes, force_str
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode

from django.contrib import messages
from django.contrib.auth import get_user_model, login, authenticate
from django.contrib.auth.models import auth
from django.contrib.sites.shortcuts import get_current_site

from .forms import RegistrationForm, LoginForm
from .tokens import account_activation_token


def home(request):
    messages_to_display = messages.get_messages(request)
    return render(request, "index.html", {"messages": messages_to_display})


def register_user(request):
    if request.method == "POST":
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.is_active = True
            user.save()

            # current_site = get_current_site(request)
            # mail_subject = "Activate your account"
            # message = render_to_string("user_accounts/account_activation_email.html", {
            #     "user": user,
            #     "domain": current_site.domain,
            #     "uid": urlsafe_base64_encode(force_bytes(user.pk)),
            #     "token": account_activation_token.make_token(user),
            # })
            # to_email = form.cleaned_data.get("email")
            # email = EmailMessage(mail_subject, message, to=[to_email])
            # email.content_subtype = "html"  # This is important to render HTML content
            # email.send()
            #
            # messages.success(request, "Please check your email to complete the registration.")
            return redirect("index")
    else:
        form = RegistrationForm()

    return render(request, "user_accounts/register.html", {"form": form})


def activate(request, uidb64, token):
    User = get_user_model()
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        user = None

    if user is not None and account_activation_token.check_token(user, token):
        user.is_active = True
        user.save()
        login(request, user)
        messages.success(request, "Your account has been successfully activated.")
        return redirect(reverse("login"))
    else:
        messages.error(request, "Activation link is invalid or expired.")
        return redirect("index")


def login_user(request):
    form = LoginForm()
    if request.method == "POST":
        form = LoginForm(request, data=request.POST)

        if form.is_valid():
            username = request.POST.get('username')
            password = request.POST.get('password')

            user = authenticate(request, username=username, password=password)

            if user is not None:
                auth.login(request, user)
                return redirect("dashboard")

    context = {'form': form}

    return render(request, 'user_accounts/login.html', context=context)


def logout_user(request):
    auth.logout(request)
    messages.success(request, "Logout success!")
    return redirect("index")




#####################################################

File Name: urls.py
File Path: ../budgecument/apps/user_accounts/urls.py

from django.urls import path, include
from . import views

urlpatterns = [
    path('', include("django.contrib.auth.urls")),
    path('register/', views.register_user, name='register'),
    path('activate/<str:uidb64>/<str:token>', views.activate, name='activate'),
    path('login', views.login_user,name="login"),
    path('logout', views.logout_user, name="logout"),
]



#####################################################

File Name: models.py
File Path: ../budgecument/apps/bank_accounts/models.py

from django.core.exceptions import ValidationError
from django.db import models

from ..common.models import AccountHolder, Currency, BankName, OtherHolder

import datetime
import uuid


# - Bank Account
class BankAccount(models.Model):
    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    name = models.CharField(max_length=200)
    bank = models.ForeignKey(BankName, on_delete=models.CASCADE)
    account_holder = models.ForeignKey(AccountHolder, on_delete=models.CASCADE)
    currency = models.ForeignKey(Currency, on_delete=models.CASCADE)
    current_balance = models.DecimalField(max_digits=100, decimal_places=2, default=0.00)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.bank} {self.name} - {self.currency.code} (Bakiye: {self.current_balance} {self.currency.symbol} )"

    def delete(self, *args, **kwargs):
        if self.current_balance != 0:
            raise ValidationError("Hesap silinemez. Mevcut bakiye sıfır değil.")
        super().delete(*args, **kwargs)

    class Meta:
        verbose_name = "Banka Hesabı"
        verbose_name_plural = "Banka Hesapları"

    @property
    def has_transactions(self):
        return Transaction.objects.filter(source_account=self).exists() or Transaction.objects.filter(destination_account=self).exists()










# - Transaction
class Transaction(models.Model):
    TRANSACTION_TYPES = [
        ('deposit', 'Gelen'),
        ('withdraw', 'Giden'),
        ('transfer', 'Transfer'),
    ]

    uid = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    source_account = models.ForeignKey(BankAccount, related_name='transactions', on_delete=models.CASCADE)
    destination_account = models.ForeignKey(BankAccount, related_name='received_transactions', on_delete=models.CASCADE,
                                            null=True, blank=True)
    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)
    description = models.CharField(max_length=255)
    date = models.DateTimeField(default=datetime.datetime.now)
    amount = models.DecimalField(max_digits=100, decimal_places=2)
    amount_after_transaction = models.DecimalField(max_digits=100, decimal_places=2)

    def save(self, *args, **kwargs):
        if self.transaction_type == 'deposit':
            self.source_account.current_balance += self.amount
        elif self.transaction_type == 'withdraw':
            self.source_account.current_balance -= self.amount
        elif self.transaction_type == 'transfer':
            if self.destination_account:
                self.source_account.current_balance -= self.amount
                self.destination_account.current_balance += self.amount
                self.destination_account.save()
        self.amount_after_transaction = self.source_account.current_balance
        self.source_account.save()
        super(Transaction, self).save(*args, **kwargs)

    def __str__(self):
        return f"{self.transaction_type} - {self.amount} - {self.source_account.name}"

    class Meta:
        verbose_name = "İşlem"
        verbose_name_plural = "İşlemler"




#####################################################

File Name: forms.py
File Path: ../budgecument/apps/bank_accounts/forms.py

from django import forms
from django.db.models import Q

from .models import BankAccount, Transaction

class BankAccountForm(forms.ModelForm):
    class Meta:
        model = BankAccount
        fields = ['name', 'bank', 'currency', 'current_balance', 'is_active']
        labels = {
            'name': 'Hesap Adı',
            'bank': 'Banka Adı',
            'currency': 'Para Birimi',
            'current_balance': 'Mevcut Bakiye',
            'is_active': 'Aktif',
        }

    def __init__(self, *args, **kwargs):
        super(BankAccountForm, self).__init__(*args, **kwargs)
        if self.instance and self.instance.pk:  # Check if instance has a primary key
            if self.instance.current_balance != 0:
                self.fields['is_active'].disabled = True
            if self.instance.current_balance != 0 or self.instance.has_transactions:
                self.fields['bank'].disabled = True
                self.fields['currency'].disabled = True
                self.fields['current_balance'].disabled = True
            for field in self.fields:
                if field not in ['name', 'is_active']:
                    self.fields[field].disabled = True





class TransactionForm(forms.ModelForm):
    class Meta:
        model = Transaction
        fields = ['transaction_type', 'source_account', 'destination_account', 'description', 'amount','date']

        widgets = {
            'transaction_type': forms.Select(attrs={'class': 'form-control', 'id': 'id_transaction_type'}),
            'source_account': forms.Select(attrs={'class': 'form-control', 'id': 'id_source_account'}),
            'destination_account': forms.Select(attrs={'class': 'form-control', 'id': 'id_destination_account'}),
            'description': forms.TextInput(attrs={'class': 'form-control'}),
            'amount': forms.NumberInput(attrs={'class': 'form-control'}),
            'date': forms.DateInput(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super(TransactionForm, self).__init__(*args, **kwargs)
        user = kwargs.get('initial', {}).get('user', None)
        if user:
            # List Only is_active true and account holders account
            self.fields['source_account'].queryset = BankAccount.objects.filter(
                account_holder=user.accountholder, is_active=True)
            self.fields['destination_account'].queryset = BankAccount.objects.filter(
                account_holder=user.accountholder, is_active=True)








#####################################################

File Name: views.py
File Path: ../budgecument/apps/bank_accounts/views.py

from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import ValidationError
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render, redirect
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView

from .models import BankAccount, Transaction
from .forms import TransactionForm,BankAccountForm

from itertools import groupby
from operator import itemgetter


####################################################################################
# - Bank Account
class BankAccountListView(LoginRequiredMixin, ListView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_list.html'

    def get_queryset(self):
        account_holder = self.request.user.accountholder
        return BankAccount.objects.filter(account_holder=account_holder, is_active=True).order_by('bank__name')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        bank_accounts = self.get_queryset()
        grouped_accounts = []
        for key, group in groupby(bank_accounts, key=lambda x: x.bank):
            grouped_accounts.append((key, list(group)))
        context['grouped_accounts'] = grouped_accounts
        return context


class BankAccountDetailView(LoginRequiredMixin, DetailView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_detail.html'
    context_object_name = 'bank_account'
    pk_url_kwarg = 'uid'

    def get_object(self):
        uid = self.kwargs.get('uid')
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        bank_account = self.get_object()
        context['transactions'] = Transaction.objects.filter(
            source_account=bank_account
        ) | Transaction.objects.filter(
            destination_account=bank_account
        )
        return context


class BankAccountCreateView(LoginRequiredMixin, CreateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'bank_accounts/bank_account_form.html'
    success_url = reverse_lazy('bank_account_list')

    def form_valid(self, form):
        form.instance.account_holder = self.request.user.accountholder
        return super().form_valid(form)


class BankAccountUpdateView(LoginRequiredMixin, UpdateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'bank_accounts/bank_account_form.html'
    success_url = reverse_lazy('bank_account_list')

    def form_valid(self, form):
        form.instance.account_holder = self.request.user.accountholder
        return super().form_valid(form)

    def get_object(self):
        uid = self.kwargs.get('uid')
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)


class BankAccountDeleteView(LoginRequiredMixin, DeleteView):
    model = BankAccount
    template_name = 'bank_accounts/bank_account_confirm_delete.html'
    success_url = reverse_lazy('bank_account_list')
    pk_url_kwarg = 'uid'

    def form_valid(self, form):
        try:
            self.object.delete()
            messages.success(self.request, "Hesap başarıyla silindi.")
            return HttpResponseRedirect(self.success_url)
        except ValidationError as e:
            messages.error(self.request, e.message)
            return redirect(self.request.META.get('HTTP_REFERER'))

    def get_object(self, queryset=None):
        uid = self.kwargs.get(self.pk_url_kwarg)
        return get_object_or_404(BankAccount, uid=uid, account_holder=self.request.user.accountholder)


class InactiveBankAccountListView(LoginRequiredMixin, ListView):
    model = BankAccount
    template_name = 'bank_accounts/inactive_bank_account_list.html'
    context_object_name = 'inactive_bank_accounts'

    def get_queryset(self):
        account_holder = self.request.user.accountholder
        queryset = BankAccount.objects.filter(account_holder=account_holder, is_active=False).order_by('bank__name')
        return queryset





####################################################################################
# Transactions
class TransactionListView(LoginRequiredMixin, ListView):
    model = Transaction
    template_name = 'transactions/transaction_list.html'
    context_object_name = 'transactions'

    def get_queryset(self):
        return Transaction.objects.filter(source_account__account_holder=self.request.user.accountholder)


class TransactionDetailView(LoginRequiredMixin, DetailView):
    model = Transaction
    template_name = 'transactions/transaction_detail.html'
    context_object_name = 'transaction'
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)


class TransactionCreateView(LoginRequiredMixin, CreateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'transactions/transaction_form.html'
    success_url = reverse_lazy('transaction_list')

    def get_form(self, form_class=None):
        form = super(TransactionCreateView, self).get_form(form_class)
        form.fields['source_account'].queryset = BankAccount.objects.filter(
            account_holder=self.request.user.accountholder)
        form.fields['destination_account'].queryset = BankAccount.objects.filter(
            account_holder=self.request.user.accountholder)
        return form

    def form_valid(self, form):
        form.instance.source_account = form.cleaned_data['source_account']
        form.instance.transaction_type = form.cleaned_data['transaction_type']
        form.instance.description = form.cleaned_data['description']
        form.instance.amount = form.cleaned_data['amount']
        form.instance.date = form.cleaned_data['date']

        if form.cleaned_data['transaction_type'] == 'transfer':
            form.instance.destination_account = form.cleaned_data['destination_account']

        return super().form_valid(form)


class TransactionUpdateView(LoginRequiredMixin, UpdateView):
    model = Transaction
    form_class = TransactionForm
    template_name = 'transactions/transaction_form.html'
    success_url = reverse_lazy('transaction_list')
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)


class TransactionDeleteView(LoginRequiredMixin, DeleteView):
    model = Transaction
    template_name = 'transactions/transaction_confirm_delete.html'
    success_url = reverse_lazy('transaction_list')
    pk_url_kwarg = 'transaction_uid'

    def get_object(self):
        uid = self.kwargs.get('transaction_uid')
        return get_object_or_404(Transaction, uid=uid, source_account__account_holder=self.request.user.accountholder)

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()

        # Get the source account of the transaction
        source_account = self.object.source_account

        # Update current_balance of the source account
        if self.object.transaction_type == 'deposit':
            source_account.current_balance -= self.object.amount
        elif self.object.transaction_type == 'withdraw':
            source_account.current_balance += self.object.amount
        elif self.object.transaction_type == 'transfer':
            source_account.current_balance += self.object.amount

            # If it's a transfer, also update the destination account's balance
            destination_account = self.object.destination_account
            destination_account.current_balance -= self.object.amount
            destination_account.save()

        source_account.save()

        # Delete the transaction object
        self.object.delete()

        return HttpResponseRedirect(self.get_success_url())




#####################################################

File Name: urls.py
File Path: ../budgecument/apps/bank_accounts/urls.py

from django.urls import path
from . import views

urlpatterns = [
    # Bank Account URL
    path('', views.BankAccountListView.as_view(), name='bank_account_list'),
    path('detail/<uuid:uid>/', views.BankAccountDetailView.as_view(), name='bank_account_detail'),
    path('new/', views.BankAccountCreateView.as_view(), name='bank_account_create'),
    path('edit/<uuid:uid>/', views.BankAccountUpdateView.as_view(), name='bank_account_edit'),
    path('delete/<uuid:uid>/', views.BankAccountDeleteView.as_view(), name='bank_account_delete'),

    # Inactive Bank Account URL
    path('inactive/', views.InactiveBankAccountListView.as_view(), name='inactive_bank_account_list'),

    # Transaction URL
    path('transactions/', views.TransactionListView.as_view(), name='transaction_list'),
    path('transactions/new/', views.TransactionCreateView.as_view(), name='transaction_create'),
    path('transactions/<uuid:transaction_uid>/', views.TransactionDetailView.as_view(), name='transaction_detail'),
    path('transactions/update/<uuid:transaction_uid>/', views.TransactionUpdateView.as_view(), name='transaction_update'),
    path('transactions/delete/<uuid:transaction_uid>/', views.TransactionDeleteView.as_view(), name='transaction_delete'),
]


#####################################################

File Name: models.py
File Path: ../budgecument/apps/common/models.py

from django.db import models
from django.contrib.auth.models import User

class AccountHolder(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.user.username}"

    class Meta:
        verbose_name = "Hesap Sahibi"
        verbose_name_plural = "Hesap Sahipleri"

class Currency(models.Model):
    code = models.CharField(max_length=3, unique=True)  # ISO 4217 code
    name = models.CharField(max_length=50)
    symbol = models.CharField(max_length=10)

    def __str__(self):
        return f"{self.name} ({self.code})"

    class Meta:
        verbose_name = "Para Birimi"
        verbose_name_plural = "Para Birimleri"


class BankName(models.Model):
    name = models.CharField(max_length=200)
    color = models.CharField(max_length=7, default="#efefef")


    def __str__(self):
        return f"{self.name}"

    class Meta:
        verbose_name = "Banka Adı"
        verbose_name_plural = "Banka Adları"


class OtherHolder(models.Model):
    name = models.CharField(max_length=200)
    short_name = models.CharField(max_length=5)
    account_holder = models.ForeignKey(AccountHolder, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.name}"

    class Meta:
        verbose_name = "Diğer İşlem Sahibi"
        verbose_name_plural = "Diğer İşlem Sahipleri"



#####################################################

File Name: views.py
File Path: ../budgecument/apps/common/views.py

from django.shortcuts import render

# Create your views here.


#####################################################

File Name: models.py
File Path: ../budgecument/apps/credit_cards/models.py

from django.db import models
# from ..common.models import AccountHolder, Currency, BankName, OtherHolder
#
#
# class CreditCard(models.Model):
#     name = models.CharField(max_length=200)
#     bank = models.ForeignKey(BankName, on_delete=models.CASCADE)
#     account_holder = models.ForeignKey(AccountHolder, on_delete=models.CASCADE)
#     currency = models.ForeignKey(Currency, on_delete=models.CASCADE)
#     cutoff_day = models.IntegerField()  # Hesap kesim günü
#     pay_day = models.IntegerField()  # Ödeme günü
#     limit = models.DecimalField(max_digits=100, decimal_places=2)  # Kart limiti
#
#     def __str__(self):
#         return f"{self.name} - {self.bank.name} ({self.currency.code})"
#
#
#     class Meta:
#         verbose_name = "Kredi Kartı"
#         verbose_name_plural = "Kredi Kartları"





#####################################################

File Name: views.py
File Path: ../budgecument/apps/credit_cards/views.py

# from django.shortcuts import render, get_object_or_404
# from django.contrib.auth.decorators import login_required
# from .models import CreditCard, AccountHolder
#
# @login_required(login_url='login_user')
# def credit_card_list(request):
#     account_holder = get_object_or_404(AccountHolder, user=request.user)
#     credit_cards = CreditCard.objects.filter(account_holder=account_holder)
#     return render(request, 'credit_card_list.html', {'credit_cards': credit_cards})
#
# @login_required(login_url='login_user')
# def credit_card_detail(request, pk):
#     account_holder = get_object_or_404(AccountHolder, user=request.user)
#     credit_card = get_object_or_404(CreditCard, pk=pk, account_holder=account_holder)
#     return render(request, 'credit_card_detail.html', {'credit_card': credit_card})
#
# @login_required(login_url='login_user')
# def create_credit_card(request):
#     if request.method == 'POST':
#         # Form işleme kodu
#         pass
#     else:
#         # Boş form gösterimi kodu
#         pass
#     return render(request, 'create_credit_card.html')




#####################################################

File Name: urls.py
File Path: ../budgecument/apps/credit_cards/urls.py

# from django.urls import path
# from . import views
#
# urlpatterns = [
#     path('credit-cards/', views.credit_card_list, name='credit_card_list'),
#     path('credit-cards/<int:pk>/', views.credit_card_detail, name='credit_card_detail'),
#     path('credit-cards/new/', views.create_credit_card, name='create_credit_card'),
# ]



#####################################################

File Name: views.py
File Path: ../budgecument/budgecument/views.py

from django.shortcuts import render
from django.contrib.auth.decorators import login_required


def home(request):
    return render(request, 'index.html')


@login_required(login_url='login')
def dashboard(request):
    return render(request, 'dashboard.html')



#####################################################

File Name: urls.py
File Path: ../budgecument/budgecument/urls.py


from django.contrib import admin
from django.urls import path, include
from . import views

urlpatterns = [
    path("", views.home, name='index'),
    path("admin/", admin.site.urls),
    path("user_accounts/", include('apps.user_accounts.urls')),
    path("bank_accounts/", include('apps.bank_accounts.urls')),
    path("credit_cards/", include('apps.credit_cards.urls')),
    path('dashboard/', views.dashboard, name='dashboard'),
]


#####################################################

File Name: styles.css
File Path: ../budgecument/static/css/styles.css

.message.error {
    color : red;
}

.message.success {
    color: green;
}





.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}



#####################################################

File Name: app.js
File Path: ../budgecument/static/js/app.js


// Modal
function showModal(uid, modalTextContent, deleteUrl) {
    var modal = document.getElementById('deleteModal');
    var modalText = document.getElementById('modalText');
    var deleteForm = document.getElementById('deleteForm');
    var deleteUid = document.getElementById('deleteUid');

    modal.style.display = "block";
    modalText.textContent = modalTextContent;
    deleteForm.action = deleteUrl;  // Set the form action URL
    deleteUid.value = uid;  // Set the value of hidden input to the bank account uid
}

function closeModal() {
    var modal = document.getElementById('deleteModal');
    modal.style.display = "none";
}

window.onclick = function(event) {
    var modal = document.getElementById('deleteModal');
    if (event.target == modal) {
        modal.style.display = "none";
    }
};


#####################################################

File Name: base.html
File Path: ../budgecument/templates/base.html

{% load static %}
<!doctype html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{% block title %}{% endblock %}</title>
    <!-- Favicon -->
    <link rel="shortcut icon" href="{% static 'favicon.ico' %}" type="image/x-icon">
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Select2 CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <!-- Font -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" type="text/css" href="{% static 'css/styles.css' %}">


</head>
<body>
        <!-- NavBar -->
        {% include 'navbar.html' %}
        <br>

        <!-- Messages -->
        {% for message in messages %}
            <div class="message {{message.tags}} text-center">
                {{message}}
            </div>
        {% endfor %}

        <!-- Content -->
        {% block content %}
        <!-- Default content -->
        {% endblock %}

        <!-- Footer -->
        {% include 'footer.html' %}

        <!-- Modal -->
        <div id="deleteModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <p id="modalText"></p>
                <form id="deleteForm" method="post">
                    {% csrf_token %}
                    <input type="hidden" name="uid" id="deleteUid">
                    <button type="submit" class="btn btn-danger">Evet</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Hayır</button>
                </form>
            </div>
        </div>

        <!-- Bootstrap -->
        <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
        <!-- jQuery -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <!-- Select2 JS -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
        <!-- Custom JS -->
        <script src="{% static 'js/app.js' %}"></script>

</body>
</html>


#####################################################

File Name: navbar.html
File Path: ../budgecument/templates/navbar.html


<nav class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand" href="http://127.0.0.1:8000/">Budgecument</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">


        <!-- Ürünler -->
        {% if user.is_authenticated %}
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            Ürünler
          </a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="{% url 'bank_account_list' %}">Aktif Banka Hesapları</a></li>
            <li><a class="dropdown-item" href="{% url 'inactive_bank_account_list' %}">Pasif Banka Hesapları</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="{% url 'bank_account_list' %}">Kredi Kartları</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="#">Something else here</a></li>
          </ul>
        </li>
        {% endif %}


        <!-- İşlemler -->
        {% if user.is_authenticated %}
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            İşlemler
          </a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="{% url 'transaction_list' %}">Hesap İşlemleri</a></li>
            <li><a class="dropdown-item" href="{% url 'transaction_list' %}">Kredi Kartı İşlemleri</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="#">Something else here</a></li>
          </ul>
        </li>
        {% endif %}






        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">aaaa</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Link</a>
        </li>


        <li class="nav-item">
          <a class="nav-link disabled" aria-disabled="true">Disabled</a>
        </li>
      </ul>
      <form class="d-flex" role="search">
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
        <button class="btn btn-outline-success" type="submit">Search</button>
      </form>


      <!-- Login / Register / Sign out -->
        <ul class="navbar-nav mr-auto">
          &nbsp;     &nbsp;     &nbsp;
          {% if user.is_authenticated %}
          <p class="nav-link active"> </p>
              <li class="nav-item">
                <a class="btn btn-outline-danger" href="{% url 'logout' %}">{{user.username}} Sign out &nbsp;
                  <i class="fa fa-sign-out" aria-hidden="true"></i> </a>
              </li>
        </ul>

        {% else %}
          <li class="nav-item">
            <a class="btn btn-outline-success" href="{% url 'login' %}">Login &nbsp;
                <i class="fa fa-key" aria-hidden="true"></i></a>
          </li>
      &nbsp;

          <li class="nav-item">
            <a class="btn btn-outline-primary" href="{% url 'register' %}"> Register &nbsp;
              <i class="fa fa-user" aria-hidden="true"></i></a>
          </li>

      {% endif %}



      </div>

    </div>

</nav>


#####################################################

File Name: bank_account_confirm_delete.html
File Path: ../budgecument/templates/bank_accounts/bank_account_confirm_delete.html

{% extends "base.html" %}

{% block content %}
  <h1>{{ object.name }} Hesabını Sil</h1>
  <p>Bu işlemi geri alamazsınız.</p>

  <form method="post">
    {% csrf_token %}
    {% if object.current_balance == 0 %}
      <input type="submit" value="Sil" class="btn btn-danger">
    {% else %}
      <button type="button" class="btn btn-danger" disabled>Sil</button>
      <p class="text-danger">Hesap silinemez. Mevcut bakiye sıfır değil.</p>
    {% endif %}
  </form>

  <a href="{% url 'bank_account_list' %}" class="btn btn-secondary">Geri Dön</a>
{% endblock %}




#####################################################

File Name: bank_account_form.html
File Path: ../budgecument/templates/bank_accounts/bank_account_form.html

{% extends "base.html" %}
{% block title %}Budgecument - Banka Hesapları {% endblock %}
{% load crispy_forms_tags %}

{% block content %}

<div class="container col-md-6 bg-light shadow-md p-3 form-layout">
  <h3>{% if object %}Hesabı Düzenle{% else %}Yeni Hesap{% endif %}</h3>
  <form method="post" autocomplete="off">
    {% csrf_token %}
    {{form.is_active|as_crispy_field}}
    <br>
    {{form.name|as_crispy_field}}
    <br>
    {{form.bank|as_crispy_field}}
    <br>
    {{form.currency|as_crispy_field}}
    <br>
    {{form.current_balance|as_crispy_field}}
    <br>
    <button type="submit" class="btn btn-success w-40 btn-block p-2">Kaydet &nbsp;
      <i class="fa fa-floppy-o" aria-hidden="true"></i></button>
    <a href="{% url 'bank_account_list' %}" class="btn btn-secondary w-40 btn-block p-2">Geri Dön &nbsp;
      <i class="fa fa-arrow-circle-left" aria-hidden="true"></i></a>
  </form>


</div>
{% endblock %}




#####################################################

File Name: inactive_bank_account_list.html
File Path: ../budgecument/templates/bank_accounts/inactive_bank_account_list.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Pasif Banka Hesapları{% endblock %}

{% block content %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class="p-2">Pasif Banka Hesapları</h4>
    </div>
    <br>

    {% if inactive_bank_accounts %}
        <div class="card mb-3">
            <div class="card-header">
                Pasif Hesaplar
            </div>
            <ul class="list-group list-group-flush">
                {% for account in inactive_bank_accounts %}
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-sm-1 text-center">{{ forloop.counter }}</div>
                            <div class="col-sm-5">{{ account.bank }} - {{ account.name }} ({{ account.currency.code}})</div>
                            <div class="col-sm-3 text-center {% if account.current_balance < 0 %}text-danger{% endif %}">
                                {{ account.current_balance }} {{ account.currency.symbol }}
                            </div>
                            <div class="col-sm-3 text-center">
                                <a class="btn btn-primary btn-sm" href="{% url 'bank_account_detail' uid=account.uid %}">
                                    <i class="fa fa-eye" aria-hidden="true"></i>
                                </a>
                                <a class="btn btn-success btn-sm" href="{% url 'bank_account_edit' uid=account.uid %}">
                                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                </a>
                            </div>
                        </div>
                    </li>
                {% endfor %}
            </ul>
        </div>
    {% else %}
        <p>Aktif olmayan banka hesabı bulunamadı.</p>
    {% endif %}
</div>
{% endblock %}




#####################################################

File Name: bank_account_detail.html
File Path: ../budgecument/templates/bank_accounts/bank_account_detail.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Hesap Detayı{% endblock %}

{% block content %}
<div class="container">
    <h4 class="p-2 text-center">{{ bank_account.bank.name }} {{ bank_account.name }} Hesabı ({{ bank_account.currency.code }}) - Detaylar</h4>
        <div class="d-inline"><strong>Mevcut Bakiye:</strong></div>
        <div class="d-inline {% if object.current_balance < 0 %}text-danger{% endif %}"> {{ object.current_balance }} {{ object.currency.symbol }}</div>
    <br>
    <br>

  <div class="d-flex justify-content-between align-items-center">
    <h4 class="p-2">İşlemler</h4>
    <a href="{% url 'transaction_create' %}" class="btn btn-outline-success btn-sm">Ekle &nbsp;
    <i class="fa fa-plus-circle" aria-hidden="true"></i></a>
  </div>
    <hr>

  <table class="table table-hover table-bordered">
      <thead class="table-light text-center">
          <tr>
              <th scope="col" class="col-sm-1" >#</th>
              <th scope="col" class="col-sm-1">Tarih</th>
              <th scope="col" class="col-sm-1" >İşlem Türü</th>
              <th scope="col">Kaynak Hesap</th>
              <th scope="col">Hedef Hesap</th>
              <th scope="col">Açıklama</th>
              <th scope="col">Tutar</th>
              <th scope="col" class="col-sm-2">Detaylar</th>
          </tr>
      </thead>
      <tbody>
      {% if transactions %}
          {% for transaction in transactions %}
          <tr class="text-center">
              <td>{{ forloop.counter }}</td>
              <td>{{ transaction.date |date:"d/m/Y" }}</td>
              <td>{{ transaction.get_transaction_type_display }}</td>
              <td>{{ transaction.source_account }}</td>
              <td>{{ transaction.destination_account|default:"-" }}</td>
              <td>{{ transaction.description }}</td>
              <td class="{% if transaction.get_transaction_type_display == 'Giden' %}text-danger{% endif %}">{% if transaction.get_transaction_type_display == "Giden" %}-{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% else %}{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% endif %}</td>
              <td>
                  <a class="btn btn-primary btn-sm" href="{% url 'transaction_detail' transaction_uid=transaction.uid %}">
                      <i class="fa fa-eye" aria-hidden="true"></i></a>
                  <a class="btn btn-success btn-sm" href="{% url 'transaction_update' transaction_uid=transaction.uid %}">
                      <i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>
                  <a class="btn btn-danger btn-sm" href="{% url 'transaction_delete' transaction_uid=transaction.uid %}">
                      <i class="fa fa-trash" aria-hidden="true"></i></a>
              </td>
          </tr>
          {% endfor %}
      {% else %}
            <tr>
                <td colspan="8">İşlem bulunamadı.</td>
            </tr>
        {% endif %}
      </tbody>
  </table>

  <a href="{% url 'bank_account_list' %}" class="btn btn-secondary w-40 btn-block p-2">Geri Dön &nbsp;
    <i class="fa fa-arrow-circle-left" aria-hidden="true"></i></a>
</div>
{% endblock %}




#####################################################

File Name: bank_account_list.html
File Path: ../budgecument/templates/bank_accounts/bank_account_list.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Banka Hesapları{% endblock %}

{% block content %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class="p-2">Banka Hesapları</h4>
        <a href="{% url 'bank_account_create' %}" class="btn btn-outline-success btn-sm">Ekle &nbsp;
        <i class="fa fa-plus-circle" aria-hidden="true"></i></a>
    </div>
    <br>

    {% if grouped_accounts %}
        {% for bank, accounts in grouped_accounts %}
            <div class="card mb-3" style="background-color: {{ bank.color }}">
                <div class="card-header">
                    {{ bank.name }}
                </div>
                <ul class="list-group list-group-flush">
                    {% for account in accounts %}
                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-sm-1 text-center">{{ forloop.counter }}</div>
                                    <div class="col-sm-5">{{ account.name }} ({{ account.currency.code }})</div>
                                    <div class="col-sm-3 text-center {% if account.current_balance < 0 %}text-danger{% endif %}">
                                        {{ account.current_balance }} {{ account.currency.symbol }}
                                    </div>
                                    <div class="col-sm-3 text-center">

                                        <a class="btn btn-primary btn-sm" href="{% url 'bank_account_detail' uid=account.uid %}">
                                            <i class="fa fa-eye" aria-hidden="true"></i>
                                        </a>

                                        <a class="btn btn-success btn-sm" href="{% url 'bank_account_edit' uid=account.uid %}">
                                            <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                        </a>

                                        <a href="#"
                                           class="btn btn-danger btn-sm {% if account.current_balance != 0 or account.has_transactions %}disabled{% endif %}"
                                           tabindex="-1"
                                           onclick="showModal('{{ account.uid }}',
                                                              'Bu banka hesabını silmek istediğinize emin misiniz?',
                                                              '{% url 'bank_account_delete' uid=account.uid %}')">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                        </a>

                                    </div>
                                </div>
                            </li>

                    {% endfor %}
                </ul>
            </div>
        {% endfor %}
    {% else %}
        <p>Banka hesabı bulunamadı.</p>
    {% endif %}
</div>
{% endblock %}

#####################################################

File Name: credit_card_list.html
File Path: ../budgecument/templates/credit_cards/credit_card_list.html

{% extends 'base.html' %}

{% block content %}
<h2>Kredi Kartları</h2>
<ul>
    {% for card in credit_cards %}
    <li>{{ card.name }} - {{ card.bank.name }} - {{ card.currency.code }} - Limit: {{ card.limit }}</li>
    {% endfor %}
</ul>
{% endblock %}




#####################################################

File Name: credit_card_detail.html
File Path: ../budgecument/templates/credit_cards/credit_card_detail.html

{% extends 'base.html' %}

{% block content %}
<h2>{{ credit_card.name }}</h2>
<p>Banka: {{ credit_card.bank.name }}</p>
<p>Para Birimi: {{ credit_card.currency.code }}</p>
<p>Limit: {{ credit_card.limit }}</p>
<p>Hesap Kesim Günü: {{ credit_card.cutoff_day }}</p>
<p>Ödeme Günü: {{ credit_card.pay_day }}</p>
{% endblock %}



#####################################################

File Name: transaction_confirm_delete.html
File Path: ../budgecument/templates/transactions/transaction_confirm_delete.html

{% extends "base.html" %}
{% block title %}İşlem Sil{% endblock %}

{% block content %}
<div class="container">
    <h3>İşlemi Sil</h3>
    <p>Bu işlemi silmek istediğinizden emin misiniz?</p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Sil</button>
        <a href="{% url 'transaction_list' %}" class="btn btn-secondary">Vazgeç</a>
    </form>
</div>
{% endblock %}




#####################################################

File Name: transaction_list.html
File Path: ../budgecument/templates/transactions/transaction_list.html

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - Hesap İşlemleri {% endblock %}

{% block content %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center">
    <h4 class="p-2">Hesap İşlemleri</h4>
    <a href="{% url 'transaction_create' %}" class="btn btn-outline-success btn-sm">Ekle &nbsp;
    <i class="fa fa-plus-circle" aria-hidden="true"></i></a>
  </div>
    <br>
  <table class="table table-hover table-bordered">
      <thead class="table-light text-center">
          <tr>
              <th scope="col" class="col-sm-1" >#</th>
              <th scope="col" class="col-sm-1">Tarih</th>
              <th scope="col" class="col-sm-1" >İşlem Türü</th>
              <th scope="col">Kaynak Hesap</th>
              <th scope="col">Hedef Hesap</th>
              <th scope="col">Açıklama</th>
              <th scope="col">Tutar</th>
              <th scope="col" class="col-sm-1">Detaylar</th>
          </tr>
      </thead>
      <tbody>
      {% if transactions %}
          {% for transaction in transactions %}
          <tr class="text-center">
              <td>{{ forloop.counter }}</td>
              <td>{{ transaction.date |date:"d/m/Y" }}</td>
              <td>{{ transaction.get_transaction_type_display }}</td>
              <td>{{ transaction.source_account }}</td>
              <td>{{ transaction.destination_account|default:"-" }}</td>
              <td>{{ transaction.description }}</td>
              <td class="{% if transaction.get_transaction_type_display == 'Giden' %}text-danger{% endif %}">{% if transaction.get_transaction_type_display == "Giden" %}-{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% else %}{{ transaction.amount }}{{ transaction.source_account.currency.symbol }}{% endif %}</td>
              <td>
<!--                  gerekli değil şimdilik dursun-->
<!--                  <a class="btn btn-primary btn-sm" href="{% url 'transaction_detail' transaction_uid=transaction.uid %}">-->
<!--                      <i class="fa fa-eye" aria-hidden="true"></i></a>-->
                  <a class="btn btn-success btn-sm" href="{% url 'transaction_update' transaction_uid=transaction.uid %}">
                      <i class="fa fa-pencil-square-o" aria-hidden="true"></i></a>

                  
                  <a href="#" class="btn btn-danger btn-sm" onclick="showModal('{{ transaction.uid }}',
                                                                        'Bu işlemi silmek istediğinize emin misiniz?',
                                                                         '{% url 'transaction_delete' transaction_uid=transaction.uid %}')">
                        <i class="fa fa-trash" aria-hidden="true"></i>
                    </a>

              </td>
          </tr>
          {% endfor %}
      {% else %}
            <tr>
                <td colspan="8">İşlem bulunamadı.</td>
            </tr>
        {% endif %}
      </tbody>
  </table>
</div>

{% endblock %}



#####################################################

File Name: transaction_detail.html
File Path: ../budgecument/templates/transactions/transaction_detail.html

<!--gerekli değil şimdilik dursun-->

{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Budgecument - İşlem Detayı{% endblock %}

{% block content %}
<div class="container">
    <h3>İşlem Detayı</h3>
    <ul>
        <li><strong>Tarih:</strong> {{ transaction.date }}</li>
        <li><strong>İşlem Türü:</strong> {{ transaction.get_transaction_type_display }}</li>
        <li><strong>Kaynak Hesap:</strong> {{ transaction.source_account }}</li>
        <li><strong>Hedef Hesap:</strong> {{ transaction.destination_account|default:"-" }}</li>
        <li><strong>Açıklama:</strong> {{ transaction.description }}</li>
        <li><strong>Tutar:</strong> {{ transaction.amount }}</li>
    </ul>
    <a href="{% url 'transaction_list' %}" class="btn btn-secondary">Geri Dön</a>
</div>
{% endblock %}




#####################################################

File Name: transaction_form.html
File Path: ../budgecument/templates/transactions/transaction_form.html

{% extends "base.html" %}
{% block title %}Budgecument - Yeni Hesap İşlemi {% endblock %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container col-md-6 bg-light shadow-md p-3 form-layout">
  <h3>{% if object %}İşlemi Düzenle{% else %}Yeni İşlem{% endif %}</h3>
  <form method="post" autocomplete="off">
    {% csrf_token %}

    {{ form.date.label_tag }}
    {{ form.date }}
    <br>

    {{ form.transaction_type.label_tag }}
    {{ form.transaction_type }}
    <br>
    {{ form.source_account.label_tag }}
    {{ form.source_account }}
    <br>

    <div id="destination_account_field" style="display: none;">
      {{ form.destination_account.label_tag }}
      {{ form.destination_account }}
    </div>
    <br>

    {{ form.description.label_tag }}
    {{ form.description }}
    <br>
    {{ form.amount.label_tag }}
    {{ form.amount }}
    <br>

    <button type="submit" class="btn btn-success w-40 btn-block p-2">Kaydet &nbsp;
      <i class="fa fa-floppy-o" aria-hidden="true"></i></button>
    <a href="{% url 'transaction_list' %}" class="btn btn-secondary w-40 btn-block p-2">Geri Dön &nbsp;
      <i class="fa fa-arrow-circle-left" aria-hidden="true"></i></a>
  </form>
</div>
{% endblock %}


#####################################################

File Name: register.html
File Path: ../budgecument/templates/user_accounts/register.html

{% extends 'base.html' %}
{% block title %}Budgecument - Register{% endblock %}
{% load crispy_forms_tags %}
{% block content %}

<div class="container">

    {% for message in messages %}
    <div class="message {{message.tags}} text-center">
        {{message}}
    </div>
    {% endfor %}
    <br>

    <div class="container col-md-6 bg-light shadow-md p-3 form-layout">
        <h3> Create your account</h3>
        <h5> Start managing your budge today!</h5>
        <hr>
        <br>
        <form method="POST" autocomplete="off">
            {% csrf_token %}
            {{form.username|as_crispy_field}}
            <br>
            {{form.email|as_crispy_field}}
            <br>
            {{form.password1|as_crispy_field}}
            <br>
            {{form.password2|as_crispy_field}}
            <br>
            <button type="submit" class="btn btn-primary w-100 btn-block p-2">Create account &nbsp; <i class="fa fa-user" aria-hidden="true"></i></button>
        </form>
        <br>
        <div class="text-center">
            <p>Already have an account</p><a href="{% url 'login' %}">Login </a>
        </div>
    </div>
    <br>
 </div>

{% endblock %}



#####################################################

File Name: login.html
File Path: ../budgecument/templates/user_accounts/login.html

{% extends 'base.html' %}
{% block title %}Budgecument - Login{% endblock %}
{% load crispy_forms_tags %}
{% block content %}

<div class="container">

    {% for message in messages %}
    <div class="message {{message.tags}} text-center">
        {{message}}
    </div>
    {% endfor %}
    <br>

    <div class="container col-md-6 bg-light shadow-md p-3 form-layout">
        <h3> Login to your account</h3>
        <hr>
        <br>

        <form method="POST" autocomplete="off">
            {% csrf_token %}
            {{form.username|as_crispy_field}}
                <br>
                {{form.password|as_crispy_field}}
                <br>
                <br>
            <button type="submit" class="btn btn-primary w-100 btn-block p-2">Login &nbsp;
                <i class="fa fa-key" aria-hidden="true"></i></button>
        </form>
        <br>
        <div class="text-center">
            <p>Don't have an account?</p><a href="{% url 'register' %}">Register</a>
        </div>
    </div>
    <br>
</div>
{% endblock %}



#####################################################

File Name: account_activation_email.html
File Path: ../budgecument/templates/user_accounts/account_activation_email.html

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Activate Your Account</title>
    <style>
        .email-container {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            text-align: center;

        }
        .email-header {
            background-color: #f4f4f4;
            padding: 5px;
            text-align: center;
        }
        .email-body {
            padding: 20px;
            text-align: center;
        }
        .activation-button {
            display: inline-block;
            padding: 5px 10px;
            font-size: 16px;
            color: #fff;
            background-color: #008B8B;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 10px;
        }
        .activation-button:hover {
            background-color: #2F4F4F;
        }

        .gray-text {
            color: #808080;
            font-size: 12px;
        }

        .green-text {
            color: #008B8B;
        }

    </style>
</head>
<body>
    <div class="email-container">
        <div class="email-header">
            <h2>Activate Your Account</h2>
        </div>
        <div class="email-body">
            <h3>Hi, {{ user.username }},</h3>
            <p>Welcome to Budgecument — we’re happy to have you!</p>
            <p>Please click the button below to activate your account:</p>
            <a href="http://{{ domain }}{% url 'activate' uidb64=uid token=token %}" class="activation-button">Activate Account</a>
            <br>
            <br>
            <p>Welcome aboard!</p>
            <p class="green-text">The Budgecument Crew</p>
            <br>
            <br>
            <p class="gray-text">If the link doesn’t work, copy this URL into your browser:
                <a class="gray-text" href="http://{{ domain }}{% url 'activate' uidb64=uid token=token %}">http://{{
                    domain }}{% url 'activate' uidb64=uid token=token %}</a> <!-- Domain sonrası düzelt -->

            </p>
        </div>
    </div>
</body>
</html>
